package com.example.locket.common.utils;

import android.content.Context;
import android.widget.ImageView;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.bumptech.glide.request.RequestOptions;
import com.bumptech.glide.request.target.Target;
import com.example.locket.R;

/**
 * CloudinaryImageLoader - Utility ƒë·ªÉ optimize vi·ªác load ·∫£nh t·ª´ Cloudinary
 * Supports transformations v√† caching cho Cloudinary URLs
 */
public class CloudinaryImageLoader {

    /**
     * Load ·∫£nh v·ªõi optimization c∆° b·∫£n
     */
    public static void loadImage(Context context, String imageUrl, ImageView imageView) {
        loadImage(context, imageUrl, imageView, R.drawable.ic_widget_empty_icon);
    }

    /**
     * Load ·∫£nh v·ªõi custom placeholder
     */
    public static void loadImage(Context context, String imageUrl, ImageView imageView, int placeholderRes) {
        if (context == null || imageView == null) return;

        RequestOptions requestOptions = new RequestOptions()
                .placeholder(placeholderRes)
                .error(placeholderRes)
                .diskCacheStrategy(DiskCacheStrategy.ALL)
                .centerCrop();

        Glide.with(context)
                .load(optimizeCloudinaryUrl(imageUrl))
                .apply(requestOptions)
                .into(imageView);
    }

    /**
     * Load ·∫£nh thumbnail v·ªõi k√≠ch th∆∞·ªõc nh·ªè (cho danh s√°ch)
     */
    public static void loadThumbnail(Context context, String imageUrl, ImageView imageView) {
        if (context == null || imageView == null) return;

        RequestOptions requestOptions = new RequestOptions()
                .placeholder(R.drawable.ic_widget_empty_icon)
                .error(R.drawable.ic_widget_empty_icon)
                .diskCacheStrategy(DiskCacheStrategy.ALL)
                .override(200, 200) // Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc cho thumbnail
                .centerCrop();

        Glide.with(context)
                .load(optimizeCloudinaryUrl(imageUrl, "w_200,h_200,c_fill"))
                .apply(requestOptions)
                .into(imageView);
    }

    /**
     * Load ·∫£nh profile v·ªõi transformation tr√≤n
     */
    public static void loadProfileImage(Context context, String imageUrl, ImageView imageView) {
        if (context == null || imageView == null) return;

        RequestOptions requestOptions = new RequestOptions()
                .placeholder(R.drawable.ic_widget_empty_icon)
                .error(R.drawable.ic_widget_empty_icon)
                .diskCacheStrategy(DiskCacheStrategy.ALL)
                .circleCrop();

        Glide.with(context)
                .load(optimizeCloudinaryUrl(imageUrl, "w_150,h_150,c_fill"))
                .apply(requestOptions)
                .into(imageView);
    }

    /**
     * Load ·∫£nh full size cho preview - gi·ªØ nguy√™n t·ª∑ l·ªá
     */
    public static void loadFullImage(Context context, String imageUrl, ImageView imageView) {
        if (context == null || imageView == null) return;

        RequestOptions requestOptions = new RequestOptions()
                .placeholder(R.drawable.ic_widget_empty_icon)
                .error(R.drawable.ic_widget_empty_icon)
                .diskCacheStrategy(DiskCacheStrategy.ALL)
                .fitCenter();

        Glide.with(context)
                .load(optimizeCloudinaryUrl(imageUrl, "q_auto,f_auto"))
                .apply(requestOptions)
                .into(imageView);
    }

    /**
     * üîß NEW: Load ·∫£nh moment v·ªõi fitCenter ƒë·ªÉ gi·ªØ nguy√™n t·ª∑ l·ªá
     */
    public static void loadMomentImage(Context context, String imageUrl, ImageView imageView) {
        if (context == null || imageView == null) return;

        RequestOptions requestOptions = new RequestOptions()
                .placeholder(R.drawable.ic_widget_empty_icon)
                .error(R.drawable.ic_widget_empty_icon)
                .diskCacheStrategy(DiskCacheStrategy.ALL)
                .fitCenter();

        Glide.with(context)
                .load(optimizeCloudinaryUrl(imageUrl, "q_auto,f_auto,c_scale"))
                .apply(requestOptions)
                .into(imageView);
    }

    /**
     * Optimize Cloudinary URL v·ªõi transformations
     */
    private static String optimizeCloudinaryUrl(String originalUrl) {
        return optimizeCloudinaryUrl(originalUrl, "q_auto,f_auto");
    }

    /**
     * Optimize Cloudinary URL v·ªõi custom transformations
     */
    private static String optimizeCloudinaryUrl(String originalUrl, String transformations) {
        if (originalUrl == null || originalUrl.isEmpty()) {
            return originalUrl;
        }

        // Ch·ªâ optimize n·∫øu l√† Cloudinary URL
        if (!originalUrl.contains("cloudinary.com") && !originalUrl.contains("res.cloudinary.com")) {
            return originalUrl;
        }

        try {
            // Pattern: https://res.cloudinary.com/cloud-name/image/upload/...
            if (originalUrl.contains("/image/upload/")) {
                // Th√™m transformations v√†o URL
                String optimizedUrl = originalUrl.replace("/image/upload/", "/image/upload/" + transformations + "/");
                return optimizedUrl;
            }
        } catch (Exception e) {
            // N·∫øu c√≥ l·ªói, tr·∫£ v·ªÅ URL g·ªëc
            return originalUrl;
        }

        return originalUrl;
    }

    /**
     * Preload ·∫£nh v√†o cache
     */
    public static void preloadImage(Context context, String imageUrl) {
        if (context == null || imageUrl == null || imageUrl.isEmpty()) return;

        Glide.with(context)
                .load(optimizeCloudinaryUrl(imageUrl))
                .preload();
    }

    /**
     * Clear cache cho m·ªôt URL c·ª• th·ªÉ
     */
    public static void clearImageCache(Context context, String imageUrl) {
        if (context == null || imageUrl == null || imageUrl.isEmpty()) return;

        Glide.with(context)
                .clear((Target<?>) Glide.with(context).load(imageUrl));
    }
} 